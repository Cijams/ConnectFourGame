/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package connect.four.gui;

import connect.four.Game;
import connect.four.ScoreChart;
import connect.four.board.Board;
import connect.four.board.ReadableBoard;
import connect.four.player.ComputerPlayer;
import connect.four.player.Player;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class GamePanel extends javax.swing.JPanel implements ScoreChart.Listener {

    private static final long GLOW_START_TIME = (int) System.currentTimeMillis();
    private static final int PLAY_TIME = 1500;
    private final GUI gui;
    private final Player[] players;
    private final Game game;
    private final Board board;
    private final boolean isComputerEnabled;
    private final boolean isComputerVComputerEnabled;
    private boolean falling;
    private int columnNum;
    private int turnNum;
    private int whoPlayed;
    private int newDrawPos;
    private int newColumnNum;
    private GUIPiece[] pieces;
    private boolean justWon;
    private javax.swing.JLabel pNameDisplay;
    private javax.swing.JLabel player1NameBox;
    private javax.swing.JLabel player2NameBox;
    private javax.swing.JPanel topGlass;
    private javax.swing.JLabel turnDisplay;

    public GamePanel(GUI gui, boolean isComputerEnabled, boolean isComputerVComputerEnabled) {
        //whoPlayed = 1;
        players = new Player[2];

        this.isComputerVComputerEnabled = isComputerVComputerEnabled;
        if (isComputerVComputerEnabled) {
            this.isComputerEnabled = false;

            players[0] = new GUIWrapperPlayer(new ComputerPlayer(gui.getPlayer1Name()), this);
            players[1] = new GUIWrapperPlayer(new ComputerPlayer(gui.getPlayer2Name()), this);
        } else {
            players[0] = new GUIPlayer(gui.getPlayer1Name(), this);

            this.isComputerEnabled = isComputerEnabled;
            if (isComputerEnabled) {
                players[1] = new GUIWrapperPlayer(new ComputerPlayer(gui.getPlayer2Name()), this);
            } else {
                players[1] = new GUIPlayer(gui.getPlayer2Name(), this);
            }
        }


        setSize(1280, 800);
        initComponents();
        this.gui = gui;
        board = new Board(7, 6);
        game = new Game(players, board, 4);
        game.start();
        game.registerListener(this);
        justWon = false;

        initNewGame();
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player1NameBox = new javax.swing.JLabel();
        JLabel currentWins = new JLabel();
        pNameDisplay = new javax.swing.JLabel();
        turnDisplay = new javax.swing.JLabel();
        JPanel col1 = new JPanel();
        JPanel col2 = new JPanel();
        JPanel col3 = new JPanel();
        JPanel col4 = new JPanel();
        JPanel col5 = new JPanel();
        JPanel col6 = new JPanel();
        topGlass = new javax.swing.JPanel();
        JPanel col7 = new JPanel();
        player2NameBox = new javax.swing.JLabel();
        JLabel bgImage = new JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1280, 800));
        setLayout(null);

        JButton endGame = new JButton("END GAME");
        Font font = endGame.getFont();
        Font boldFont = new Font(font.getFontName(), Font.BOLD, 20);
        endGame.setFont(boldFont);
        endGame.setBackground(new Color(44, 44, 44));
        add(endGame);
        endGame.setBounds(1075, 250, 200, 40);
        endGame.addActionListener(e -> {
            gui.setWinner("It's a tie!");
            initNewGame();
            gui.addGameOver();
            justWon = false;
        });

        currentWins.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        currentWins.setForeground(new java.awt.Color(255, 255, 255));
        currentWins.setText("CURRENT WINS");
        add(currentWins);
        currentWins.setBounds(1080, 0, 200, 40);

        player1NameBox.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        player1NameBox.setForeground(new java.awt.Color(255, 255, 255));
        player1NameBox.setText("player 1");
        add(player1NameBox);
        player1NameBox.setBounds(1080, 40, 210, 40);

        pNameDisplay.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        pNameDisplay.setForeground(new java.awt.Color(255, 255, 255));
        pNameDisplay.setText("jLabel2");
        add(pNameDisplay);
        pNameDisplay.setBounds(1080, 210, 200, 40);

        turnDisplay.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        turnDisplay.setForeground(new java.awt.Color(255, 255, 255));
        turnDisplay.setText("jLabel2");
        add(turnDisplay);
        turnDisplay.setBounds(1080, 150, 200, 40);

        col1.setBackground(new java.awt.Color(102, 102, 102));
        col1.setOpaque(false);
        col1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col1MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col1MouseEntered(evt);
            }
        });
        col1.setLayout(null);
        add(col1);
        col1.setBounds(0, 0, 310, 740);

        col2.setBackground(new java.awt.Color(102, 102, 102));
        col2.setOpaque(false);
        col2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col2MouseEntered(evt);
            }
        });
        col2.setLayout(null);
        add(col2);
        col2.setBounds(320, 0, 80, 740);

        col3.setBackground(new java.awt.Color(102, 102, 102));
        col3.setOpaque(false);
        col3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col3MouseClicked(evt);
            }
        });
        col3.setLayout(null);
        add(col3);
        col3.setBounds(410, 10, 80, 740);

        col4.setBackground(new java.awt.Color(102, 102, 102));
        col4.setOpaque(false);
        col4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col4MouseEntered(evt);
            }
        });
        col4.setLayout(null);
        add(col4);
        col4.setBounds(500, -10, 80, 740);

        col5.setBackground(new java.awt.Color(102, 102, 102));
        col5.setOpaque(false);
        col5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col5MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col5MouseEntered(evt);
            }
        });
        col5.setLayout(null);
        add(col5);
        col5.setBounds(590, 0, 80, 740);

        col6.setBackground(new java.awt.Color(102, 102, 102));
        col6.setOpaque(false);
        col6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col6MouseEntered(evt);
            }
        });
        col6.setLayout(null);
        add(col6);
        col6.setBounds(680, -30, 80, 740);

        topGlass.setBackground(new java.awt.Color(102, 102, 102));
        topGlass.setOpaque(false);
        topGlass.setLayout(null);

        col7.setBackground(new java.awt.Color(102, 102, 102));
        col7.setOpaque(false);
        col7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                col7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                col7MouseEntered(evt);
            }
        });
        col7.setLayout(null);
        topGlass.add(col7);
        col7.setBounds(770, 0, 300, 740);

        player2NameBox.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        player2NameBox.setForeground(new java.awt.Color(255, 255, 255));
        player2NameBox.setText("player 1");
        topGlass.add(player2NameBox);
        player2NameBox.setBounds(1080, 90, 210, 40);

        add(topGlass);
        topGlass.setBounds(0, 0, 1280, 800);

        bgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/connect/four/gui/Images/board.png"))); // NOI18N
        bgImage.setText("jLabel1");
        bgImage.setIgnoreRepaint(true);
        add(bgImage);
        bgImage.setBounds(0, 150, 1070, 590);
    }// </editor-fold>//GEN-END:initComponents

    private void col1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col1MouseEntered
        calcNewPos(0);
        calcWidth(0);
    }//GEN-LAST:event_col1MouseEntered

    private void col2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col2MouseEntered
        calcNewPos(1);
        calcWidth(1);
    }//GEN-LAST:event_col2MouseEntered

    private void col4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col4MouseEntered
        calcNewPos(3);
        calcWidth(3);
    }//GEN-LAST:event_col4MouseEntered

    private void col5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col5MouseEntered
        calcNewPos(4);
        calcWidth(4);
    }//GEN-LAST:event_col5MouseEntered


    private void col6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col6MouseEntered
        calcNewPos(5);
        calcWidth(5);
    }//GEN-LAST:event_col6MouseEntered

    private void col7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col7MouseEntered
        calcNewPos(6);
        calcWidth(6);
    }//GEN-LAST:event_col7MouseEntered

    private void col1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col1MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col1MouseClicked

    private void col2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col2MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col2MouseClicked

    private void col3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col3MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col3MouseClicked

    private void col4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col4MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col4MouseClicked

    private void col6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col6MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col6MouseClicked

    private void col7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col7MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col7MouseClicked

    private void col5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_col5MouseClicked
        if (isComputerVComputerEnabled) return;
        if (game.getCurrentPlayer() != players[1] || !isComputerEnabled) turn();
    }//GEN-LAST:event_col5MouseClicked

    private void dropPiece() {
        falling = true;
        final int destination = getTargetY();
        final long startTime = System.currentTimeMillis();
        pieces[turnNum].setVisible(true);

        Timer timer = new Timer((8000 / (destination)), new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int x = pieces[turnNum].getX();
                int y = pieces[turnNum].getY();
                int startY = y;
                long duration = System.currentTimeMillis() - startTime;
                float progress = (float) duration / (float) PLAY_TIME;

                if (progress > 1f) {
                    progress = 1f;
                    ((Timer) (e.getSource())).stop();
                    falling = false;
                    System.out.println("Piece fell.");
                    if (!isComputerEnabled && !isComputerVComputerEnabled) {
                        GUIPlayer player = (GUIPlayer) game.getCurrentPlayer();
                        player.getBoard().play(getColumnNum(), player);
                    } else if (isComputerVComputerEnabled) {
                        GUIWrapperPlayer player = (GUIWrapperPlayer) game.getCurrentPlayer();
                        player.getBoard().play(getColumnNum(), player);
                    } else {
                        if (game.getCurrentPlayer() == players[0]) {
                            GUIPlayer player = (GUIPlayer) game.getCurrentPlayer();
                            player.getBoard().play(getColumnNum(), player);
                        } else if (game.getCurrentPlayer() == players[1]) {
                            GUIWrapperPlayer player = (GUIWrapperPlayer) game.getCurrentPlayer();
                            player.getBoard().play(getColumnNum(), player);
                        }

                    }
                    turnUp();
                }
                y = y + Math.round((destination - startY) * progress);
                pieces[turnNum].setLocation(x, y);
                if (y == getTargetY()) {
                    ((Timer) (e.getSource())).stop();
                    falling = false;
                    System.out.println("Piece fell.");
                    if (!isComputerEnabled && !isComputerVComputerEnabled) {
                        GUIPlayer player = (GUIPlayer) game.getCurrentPlayer();
                        player.getBoard().play(getColumnNum(), player);
                    } else if (isComputerVComputerEnabled) {
                        GUIWrapperPlayer player = (GUIWrapperPlayer) game.getCurrentPlayer();
                        player.getBoard().play(getColumnNum(), player);
                    } else {
                        if (game.getCurrentPlayer() == players[0]) {
                            GUIPlayer player = (GUIPlayer) game.getCurrentPlayer();
                            player.getBoard().play(getColumnNum(), player);
                        } else if (game.getCurrentPlayer() == players[1]) {
                            GUIWrapperPlayer player = (GUIWrapperPlayer) game.getCurrentPlayer();
                            player.getBoard().play(getColumnNum(), player);
                        }
                    }

                    turnUp();
                }
            }
        });
        timer.start();
    }

    private int getTargetY() {
        int height = board.getColumnHeight(getColumnNum());
        switch (height) {
            case 0:
                return 605;
            case 1:
                return 513;
            case 2:
                return 421;
            case 3:
                return 330;
            case 4:
                return 242;
            case 5:
                return 150;
            default:
                return 150;
        }
    }

    private boolean isValidMove() {
        boolean valid = true;
        if (board.getColumnHeight(getColumnNum()) > 5) {
            valid = false;
        }
        return valid;
    }

    private int getColumnNum() {
        return columnNum;
    }

    public void calcWidth(int columnEntered) {
        int xPos = 0;

        switch (columnEntered) {
            case 0:
                xPos = 190;
                break;
            case 1:
                xPos = 280;
                break;
            case 2:
                xPos = 372;
                break;
            case 3:
                xPos = 463;
                break;
            case 4:
                xPos = 554;
                break;
            case 5:
                xPos = 645;
                break;
            case 6:
                xPos = 738;
                break;
        }


        if (!falling) {
            columnNum = columnEntered;
            pieces[turnNum].setLocation(xPos, 0);
            revalidate();
            repaint();
        }
    }

    private void calcNewPos(int columnEntered) {
        int xPos = 0;

        switch (columnEntered) {
            case 0:
                xPos = 190;
                break;
            case 1:
                xPos = 280;
                break;
            case 2:
                xPos = 372;
                break;
            case 3:
                xPos = 463;
                break;
            case 4:
                xPos = 554;
                break;
            case 5:
                xPos = 645;
                break;
            case 6:
                xPos = 738;
                break;
        }

        newDrawPos = xPos;
        newColumnNum = columnEntered;

    }

    private void turnUp() {
        if (!justWon) {
            if (!falling) {
                //move piece to top glass, for glow.
                glow(pieces[turnNum]);

                turnNum += 1;

                //Displays who is playing this turn
                if (turnNum % 2 == 0) {
                    pNameDisplay.setForeground(Color.red);
                } else {
                    pNameDisplay.setForeground(Color.blue);
                }

                //Turn goes up, unless there is a tie
                if (turnNum == 42) {
                    for (GUIPiece piece : pieces) {
                        if (piece != null) {
                            piece.setIcon(null);
                            topGlass.remove(piece);
                        }
                    }
                    gui.setWinner("It's a tie!");
                    board.clear();
                    initNewGame();
                    gui.addGameOver();
                } else {
                    pieces[turnNum] = new GUIPiece(turnNum % 2);
                    pieces[turnNum].setLocation(newDrawPos, 0);
                    if (game.getCurrentPlayer() == players[1]
                            && isComputerEnabled) {
                        pieces[turnNum].setVisible(false);
                    }
                    if (isComputerVComputerEnabled) {
                        pieces[turnNum].setVisible(false);
                    }
                    columnNum = newColumnNum;
                    System.out.println("Turn " + (turnNum + 1) + " Started!");
                    pNameDisplay.setText(game.getCurrentPlayer().getName() + "'s turn.");
                    turnDisplay.setText("Round number " + (turnNum / 2 + 1));
                    add(pieces[turnNum]);
                }

                //Makes the round display turn red if there are 10 or less turns
                if (turnNum >= 32) {
                    //Turns red to show 10 turns left
                    turnDisplay.setForeground(Color.red);
                }

                revalidate();
                repaint();


            }
        } else {
            justWon = false;
        }
    }

    public void turn() {
        if (!falling && isValidMove()) {
            System.out.println(getColumnNum());
            System.out.println(board.getColumnHeight(getColumnNum()));
            dropPiece();
        }
    }

    private void initNewGame() {
        turnNum = 0;
        columnNum = 0;
        whoPlayed = 1;
        falling = false;
        pieces = new GUIPiece[43];
        pieces[turnNum] = new GUIPiece(turnNum);
        pieces[turnNum].setLocation(newDrawPos, 0);
        if (game.getCurrentPlayer() == players[1] && isComputerEnabled) {
            pieces[turnNum].setVisible(false);
        }
        if (isComputerVComputerEnabled) {
            pieces[turnNum].setVisible(false);
        }
        add(pieces[turnNum]);
        pNameDisplay.setForeground(Color.red);
        pNameDisplay.setText(game.getCurrentPlayer().getName() + "'s turn.");
        turnDisplay.setForeground(Color.white);
        turnDisplay.setText("Round number " + (turnNum / 2 + 1));
        player1NameBox.setText(players[0].getName() + ":    " + gui.getScore1());
        player2NameBox.setText(players[1].getName() + ":    " + gui.getScore2());
        setVisible(true);
    }

    //GAME OVER
    public void gameOver(Player winner, ScoreChart scores, ReadableBoard end) {
        if (turnNum < 41) {
            if (game.getCurrentPlayer() == players[0]) {
                gui.setScore1(gui.getScore1() + 1);
            } else if (game.getCurrentPlayer() == players[1]) {
                gui.setScore2(gui.getScore2() + 1);
            }
            gui.setWinner(game.getCurrentPlayer().getName());

            board.clear();
            for (GUIPiece piece : pieces) {
                if (piece != null) {
                    piece.setIcon(null);
                    topGlass.remove(piece);
                }
            }
            initNewGame();
            gui.addGameOver();
            justWon = true;
        }
    }

    private void glow(GUIPiece currentPiece) {
        final GUIPiece cP = currentPiece;
        topGlass.add(cP);
        Timer timer = new Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                long tick = GLOW_START_TIME - System.currentTimeMillis();
                tick = (-1 * tick / 100);
                cP.setIcon(cP.getGlow((int) (tick % 6)));
                topGlass.invalidate();
                topGlass.revalidate();
                topGlass.repaint();
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.start();
    }
}
